@model DoableFinal.ViewModels.CreateTaskViewModel

@{
    ViewData["Title"] = "Create Task";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h3">Create Task</h1>
            <p class="text-muted">Create a new task and assign it to a project</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <form asp-action="CreateTask" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="mb-3">
                            <label asp-for="ProjectId" class="form-label"></label>
                            <select asp-for="ProjectId" asp-items="Model.Projects" class="form-select">
                                <option value="">-- Select Project --</option>
                            </select>
                            <span asp-validation-for="ProjectId" class="text-danger"></span>
                            <small id="projectDateInfo" class="form-text text-muted"></small>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Title" class="form-label"></label>
                            <input asp-for="Title" class="form-control" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="StartDate" class="form-label"></label>
                                    <input asp-for="StartDate" class="form-control" type="date" />
                                    <span asp-validation-for="StartDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="DueDate" class="form-label"></label>
                                    <input asp-for="DueDate" class="form-control" type="date" />
                                    <span asp-validation-for="DueDate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Status" class="form-label"></label>
                                    <select asp-for="Status" class="form-select">
                                        <option value="Not Started">Not Started</option>
                                        <option value="In Progress">In Progress</option>
                                        <option value="On Hold">On Hold</option>
                                        <option value="Completed">Completed</option>
                                    </select>
                                    <span asp-validation-for="Status" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Priority" class="form-label"></label>
                                    <select asp-for="Priority" class="form-select">
                                        <option value="Low">Low</option>
                                        <option value="Medium">Medium</option>
                                        <option value="High">High</option>
                                    </select>
                                    <span asp-validation-for="Priority" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="AssignedToIds" class="form-label">Assigned To</label>
                            <select asp-for="AssignedToIds" class="form-select select2-employee" multiple style="width: 100%;">
                            </select>
                            <small class="form-text text-muted mt-2">
                                <i class="fas fa-info-circle me-1"></i> Legend:
                                <i class="fas fa-tasks text-warning me-1"></i> Has tasks in this project
                                <i class="fas fa-exclamation-circle text-danger me-1"></i> Has incomplete tasks
                                <i class="fas fa-check-circle text-success"></i> Selected
                            </small>
                            <span asp-validation-for="AssignedToIds" class="text-danger"></span>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-plus-square"></i> Create Task
                            </button>
                            <a asp-action="Tasks" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Back to Tasks
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .employee-option {
            padding: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .employee-option i {
            font-size: 14px;
        }
        .select2-container .select2-selection--multiple {
            min-height: 38px;
        }
        .select2-container--default .select2-selection--multiple {
            border: 1px solid #ced4da;
        }
        .employee-has-tasks {
            color: #ffc107;
            margin-left: 5px;
        }
        .employee-has-incomplete-tasks {
            color: #dc3545;
            margin-left: 5px;
        }
        .employee-selected {
            color: #28a745;
            margin-left: 5px;
        }
        .employee-disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
    </style>
    <script>
        $(document).ready(function() {
            // Initialize variables
            const projectDates = @Html.Raw(ViewBag.ProjectDatesJson ?? "{}");
            const employees = @Html.Raw(ViewBag.EmployeesJson ?? "[]");
            
            // Initialize Select2 for employee assignment
            $('.select2-employee').select2({
                data: employees,
                templateResult: formatEmployee,
                templateSelection: formatEmployee,
                escapeMarkup: function(markup) { return markup; }
            }).on('select2:selecting', function(e) {
                // Prevent selection of employees with incomplete tasks
                const projectId = parseInt($('#ProjectId').val());
                const employee = e.params.args.data;
                
                if (employee.incompleteTaskProjects && employee.incompleteTaskProjects.includes(projectId)) {
                    e.preventDefault();
                    alert('This employee has incomplete tasks and cannot be assigned to new tasks.');
                }
            });
            
            function formatEmployee(employee) {
                if (!employee.id) return employee.text;
                
                const projectId = parseInt($('#ProjectId').val());
                const hasTasksInProject = projectId && employee.projectAssignments.includes(projectId);
                const hasIncompleteTasks = projectId && employee.incompleteTaskProjects && 
                                         employee.incompleteTaskProjects.includes(projectId);
                const isSelected = $('.select2-employee').val()?.includes(employee.id);
                
                const employeeDiv = $(`<div class="employee-option${hasIncompleteTasks ? ' employee-disabled' : ''}">
                    <span>${employee.text}</span>
                    ${hasTasksInProject ? '<i class="fas fa-tasks employee-has-tasks" title="Has tasks in this project"></i>' : ''}
                    ${hasIncompleteTasks ? '<i class="fas fa-exclamation-circle employee-has-incomplete-tasks" title="Has incomplete tasks"></i>' : ''}
                    ${isSelected ? '<i class="fas fa-check-circle employee-selected" title="Selected"></i>' : ''}
                </div>`);

                if (hasIncompleteTasks) {
                    employeeDiv.attr('title', 'Cannot be assigned - Has incomplete tasks');
                }

                return employeeDiv;
            }
            
            function updateDateConstraints() {
                const projectId = parseInt($('#ProjectId').val());
                if (!projectId || !projectDates[projectId]) {
                    $("#projectDateInfo").text("");
                    return;
                }

                const project = projectDates[projectId];
                const startDate = project.start;
                const endDate = project.end;

                // Set date input constraints
                $("#StartDate").attr('min', startDate);
                $("#StartDate").attr('max', endDate);
                $("#DueDate").attr('min', startDate);
                $("#DueDate").attr('max', endDate);

                // Show project date constraints
                $("#projectDateInfo").html(`Project timeline: <strong>${startDate}</strong> to <strong>${endDate}</strong>`);

                // Adjust dates if they're outside project bounds
                const currentStartDate = $("#StartDate").val();
                const currentDueDate = $("#DueDate").val();
                
                if (currentStartDate < startDate) {
                    $("#StartDate").val(startDate);
                }
                if (currentStartDate > endDate) {
                    $("#StartDate").val(endDate);
                }
                if (currentDueDate < startDate) {
                    $("#DueDate").val(startDate);
                }
                if (currentDueDate > endDate) {
                    $("#DueDate").val(endDate);
                }
            }

            // Event Handlers
            $('#ProjectId').change(function() {
                updateDateConstraints();
                
                // Clear selection for employees with incomplete tasks in the new project
                const projectId = parseInt($(this).val());
                const currentSelection = $('.select2-employee').val() || [];
                const validSelection = currentSelection.filter(employeeId => {
                    const employee = employees.find(e => e.id === employeeId);
                    return !(employee.incompleteTaskProjects && 
                            employee.incompleteTaskProjects.includes(projectId));
                });
                
                if (currentSelection.length !== validSelection.length) {
                    $('.select2-employee').val(validSelection).trigger('change');
                } else {
                    $('.select2-employee').trigger('change');
                }
            });

            $("#StartDate, #DueDate").change(function() {
                const projectId = parseInt($('#ProjectId').val());
                if (!projectId || !projectDates[projectId]) return;

                const project = projectDates[projectId];
                const startDate = project.start;
                const endDate = project.end;
                
                // Ensure dates are within project bounds
                if ($(this).val() < startDate) {
                    $(this).val(startDate);
                }
                if ($(this).val() > endDate) {
                    $(this).val(endDate);
                }

                // If DueDate is before StartDate, adjust it
                if ($(this).is('#StartDate') && $("#DueDate").val() < $(this).val()) {
                    $("#DueDate").val($(this).val());
                }
            });

            // Initial setup
            updateDateConstraints();
        });
    </script>
}