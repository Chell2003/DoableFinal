@model DoableFinal.ViewModels.CreateTaskViewModel

@{
    ViewData["Title"] = "Create Task";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h3">Create Task</h1>
            <p class="text-muted">Create a new task and assign it to a project</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <form asp-action="CreateTask" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="mb-3">
                            <label asp-for="ProjectId" class="form-label"></label>
                            <select asp-for="ProjectId" asp-items="Model.Projects" class="form-select">
                                <option value="">-- Select Project --</option>
                            </select>
                            <span asp-validation-for="ProjectId" class="text-danger"></span>
                            <small id="projectDateInfo" class="form-text text-muted"></small>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Title" class="form-label"></label>
                            <input asp-for="Title" class="form-control" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label"></label>
                            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="StartDate" class="form-label"></label>
                                    <input asp-for="StartDate" class="form-control" type="date" />
                                    <span asp-validation-for="StartDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="DueDate" class="form-label"></label>
                                    <input asp-for="DueDate" class="form-control" type="date" />
                                    <span asp-validation-for="DueDate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Status" class="form-label"></label>
                                    <select asp-for="Status" class="form-select">
                                        <option value="Not Started">Not Started</option>
                                        <option value="In Progress">In Progress</option>
                                        <option value="On Hold">On Hold</option>
                                        <option value="Completed">Completed</option>
                                    </select>
                                    <span asp-validation-for="Status" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Priority" class="form-label"></label>
                                    <select asp-for="Priority" class="form-select">
                                        <option value="Low">Low</option>
                                        <option value="Medium">Medium</option>
                                        <option value="High">High</option>
                                    </select>
                                    <span asp-validation-for="Priority" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="AssignedToIds" class="form-label">Assigned To</label>
                            <select asp-for="AssignedToIds" asp-items="Model.Employees" class="form-select" multiple>
                            </select>
                            <small class="form-text text-muted">Select one or more employees to assign to this task.</small>
                            <span asp-validation-for="AssignedToIds" class="text-danger"></span>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-plus-square"></i> Create Task
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Back to Dashboard
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function() {
            const allEmployees = @Html.Raw(Json.Serialize(ViewBag.AllEmployees));
            const projects = @Html.Raw(Json.Serialize(ViewBag.Projects));
            
            function updateDateConstraints() {
                const selectedProjectId = parseInt($('#ProjectId').val());
                if (!selectedProjectId) {
                    $("#projectDateInfo").text("");
                    return;
                }

                const project = projects.find(p => p.id === selectedProjectId);
                if (!project) return;

                // Set date input constraints based on project dates
                $("#StartDate").attr('min', project.startDate);
                $("#StartDate").attr('max', project.endDate);
                $("#DueDate").attr('min', project.startDate);
                $("#DueDate").attr('max', project.endDate);

                // Show project date constraints
                $("#projectDateInfo").html(`Project timeline: <strong>${project.startDate}</strong> to <strong>${project.endDate}</strong>`);

                // Adjust dates if they're outside project bounds
                const startDate = $("#StartDate").val();
                const dueDate = $("#DueDate").val();
                
                if (startDate < project.startDate) {
                    $("#StartDate").val(project.startDate);
                }
                if (startDate > project.endDate) {
                    $("#StartDate").val(project.endDate);
                }
                if (dueDate < project.startDate) {
                    $("#DueDate").val(project.startDate);
                }
                if (dueDate > project.endDate) {
                    $("#DueDate").val(project.endDate);
                }
            }

            // Handle project selection
            $('#ProjectId').change(function() {
                const selectedProjectId = parseInt($(this).val());
                const assignedToSelect = $('#AssignedToIds');
                
                // Update date constraints
                updateDateConstraints();
                
                // Clear current options
                assignedToSelect.empty();
                
                // Filter employees based on the selected project
                const availableEmployees = allEmployees.filter(employee => {
                    // Employee can be assigned if they don't have incomplete tasks in this project
                    return !employee.incompleteTasks.includes(selectedProjectId);
                });
                
                // Add filtered employees to select
                availableEmployees.forEach(employee => {
                    assignedToSelect.append(new Option(employee.fullName, employee.id));
                });
            });

            // Handle start date changes
            $("#StartDate").change(function() {
                const selectedProjectId = parseInt($('#ProjectId').val());
                if (!selectedProjectId) return;

                const project = projects.find(p => p.id === selectedProjectId);
                if (!project) return;

                var startDate = $(this).val();
                
                // Ensure start date is within project bounds
                if (startDate < project.startDate) {
                    $(this).val(project.startDate);
                    startDate = project.startDate;
                }
                if (startDate > project.endDate) {
                    $(this).val(project.endDate);
                    startDate = project.endDate;
                }

                // Update due date if it's before the new start date
                if (startDate > $("#DueDate").val()) {
                    $("#DueDate").val(startDate);
                }
            });

            // Handle due date changes
            $("#DueDate").change(function() {
                const selectedProjectId = parseInt($('#ProjectId').val());
                if (!selectedProjectId) return;

                const project = projects.find(p => p.id === selectedProjectId);
                if (!project) return;

                var dueDate = $(this).val();
                
                // Ensure due date is within project bounds
                if (dueDate < project.startDate) {
                    $(this).val(project.startDate);
                }
                if (dueDate > project.endDate) {
                    $(this).val(project.endDate);
                }
            });

            // Initial setup
            updateDateConstraints();
        });
    </script>
}