@model DoableFinal.Models.Project

@{
    ViewData["Title"] = "Project Details";
    var dateFormat = "MMM dd, yyyy";
    var dateTimeFormat = "MMM dd, yyyy HH:mm";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Project Details</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a asp-controller="ProjectManager" asp-action="Index">Dashboard</a></li>
        <li class="breadcrumb-item"><a asp-controller="ProjectManager" asp-action="MyProjects">Projects</a></li>
        <li class="breadcrumb-item active">Project Details</li>
    </ol>

    <div class="row">
        <!-- Project Information -->
        <div class="col-xl-8">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fas fa-project-diagram me-1"></i>
                        Project Information
                    </div>
                    <div>
                        @{
                            var totalTasks = Model.Tasks?.Count ?? 0;
                            var completedTasks = Model.Tasks?.Count(t => t.Status == "Completed") ?? 0;
                            var projectProgress = totalTasks > 0 ? (int)Math.Round((double)completedTasks / totalTasks * 100) : 0;
                        }
                        @if (projectProgress == 100 && Model.Status != "Completed")
                        {
                            <form asp-action="CompleteProject" asp-route-id="@Model.Id" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-success btn-sm me-2">
                                    <i class="fas fa-check-circle"></i> Complete Project
                                </button>
                            </form>
                        }
                    </div>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">Name:</div>
                        <div class="col-md-9">@Model.Name</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">Description:</div>
                        <div class="col-md-9">@Model.Description</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">Client:</div>
                        <div class="col-md-9">@($"{Model.Client.FirstName} {Model.Client.LastName}")</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">Status:</div>
                        <div class="col-md-9">
                            <span class="badge bg-@(Model.Status switch {
                                "Not Started" => "secondary",
                                "In Progress" => "primary",
                                "On Hold" => "warning",
                                "Completed" => "success",
                                _ => "secondary"
                            })">@Model.Status</span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">Progress:</div>
                        <div class="col-md-9">
                            @completedTasks out of @totalTasks tasks completed
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">Start Date:</div>
                        <div class="col-md-9">@Model.StartDate.ToString(dateFormat)</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 fw-bold">End Date:</div>
                        <div class="col-md-9">
                            @if (Model.EndDate.HasValue)
                            {
                                <span class="@(Model.EndDate.Value < DateTime.Now && Model.Status != "Completed" ? "text-danger" : "")">
                                    @Model.EndDate.Value.ToString(dateFormat)
                                </span>
                            }
                            else
                            {
                                <span class="text-muted">Not set</span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Gantt Chart -->
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-1"></i>
                    Project Timeline
                </div>
                <div class="card-body">
                    <div id="ganttChart"></div>
                </div>
            </div>

            <!-- Project Tasks -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fas fa-tasks me-1"></i>
                        Project Tasks
                    </div>
                    <a asp-action="CreateTask" asp-route-projectId="@Model.Id" class="btn btn-sm btn-primary">
                        <i class="bi bi-plus-lg"></i> Create Task
                    </a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Assigned To</th>
                                    <th>Due Date</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in Model.Tasks)
                                {
                                    <tr>
                                        <td>@task.Title</td>
                                        <td>@(task.TaskAssignments != null && task.TaskAssignments.Any()
                                            ? string.Join(", ", task.TaskAssignments.Select(a => a.Employee.FirstName))
                                            : "Unassigned")
                                        </td>
                                        <td>
                                            <span class="@(task.DueDate < DateTime.Now && task.Status != "Completed" ? "text-danger" : "")">
                                                @task.DueDate.ToString(dateFormat)
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge bg-@(task.Status switch {
                                                "Not Started" => "secondary",
                                                "In Progress" => "primary",
                                                "On Hold" => "warning",
                                                "Completed" => "success",
                                                _ => "secondary"
                                            })">@task.Status</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-@(task.Priority switch {
                                                "Low" => "info",
                                                "Medium" => "warning",
                                                "High" => "danger",
                                                _ => "secondary"
                                            })">@task.Priority</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Project Team -->
        <div class="col-xl-4">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-users me-1"></i>
                    Project Team
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Role</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var member in Model.ProjectTeams)
                                {
                                    <tr>
                                        <td>
                                            @($"{member.User.FirstName} {member.User.LastName}")
                                            <a asp-controller="Message" asp-action="Index" asp-route-userId="@member.User.Id" title="Message" class="btn btn-sm btn-outline-secondary ms-2">
                                                <i class="bi bi-envelope"></i>
                                            </a>
                                        </td>
                                        <td>@member.Role</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/apexcharts@3.41.0/dist/apexcharts.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get project start and end dates
            var projectStart = new Date("@Model.StartDate.ToString("yyyy-MM-dd")").getTime();
            var projectEnd = new Date("@Model.EndDate?.ToString("yyyy-MM-dd")").getTime();

            // Prepare task data
            var tasks = @Html.Raw(Json.Serialize(Model.Tasks?.Select(t => new {
                id = t.Id,
                name = t.Title ?? "Untitled Task",
                start = t.StartDate.ToString("yyyy-MM-dd"),
                end = t.DueDate.ToString("yyyy-MM-dd"),
                status = t.Status ?? "Not Set",
                assignee = t.TaskAssignments != null && t.TaskAssignments.Any()
                    ? string.Join(", ", t.TaskAssignments.Select(a => a.Employee.FirstName))
                    : "Unassigned"
            }) ?? Enumerable.Empty<object>()));

            // Configure the Gantt chart
            var options = {
                series: [{
                    data: tasks.map(function(task) {
                        return {
                            x: task.name,
                            y: [
                                new Date(task.start).getTime(),
                                new Date(task.end).getTime()
                            ],
                            fillColor: task.status === 'Completed' ? '#198754' :
                                       task.status === 'In Progress' ? '#0d6efd' :
                                       task.status === 'On Hold' ? '#ffc107' : '#6c757d',
                            assignee: task.assignee,
                            status: task.status
                        };
                    })
                }],
                chart: {
                    height: Math.max(350, tasks.length * 50),
                    type: 'rangeBar',
                    toolbar: {
                        show: false // Disable zooming and other toolbar options
                    }
                },
                plotOptions: {
                    bar: {
                        horizontal: true,
                        distributed: true,
                        dataLabels: {
                            hideOverflowingLabels: false
                        }
                    }
                },
                dataLabels: {
                    enabled: true,
                    formatter: function(val, opts) {
                        var task = tasks[opts.dataPointIndex];
                        return task.assignee + ' - ' + task.status;
                    }
                },
                xaxis: {
                    type: 'datetime',
                    min: projectStart, // Set the minimum to the project's start date
                    max: projectEnd,   // Set the maximum to the project's end date
                    labels: {
                        datetimeFormatter: {
                            year: 'yyyy',
                            month: 'MMM yyyy',
                            day: 'dd MMM',
                            hour: 'HH:mm'
                        }
                    }
                },
                yaxis: {
                    show: true
                },
                grid: {
                    row: {
                        colors: ['#f3f4f5', '#fff'],
                        opacity: 1
                    }
                },
                tooltip: {
                    custom: function({series, seriesIndex, dataPointIndex, w}) {
                        var task = tasks[dataPointIndex];
                        return '<div class="p-2">' +
                               '<div><strong>' + task.name + '</strong></div>' +
                               '<div>Start: ' + task.start + '</div>' +
                               '<div>End: ' + task.end + '</div>' +
                               '<div>Status: ' + task.status + '</div>' +
                               '<div>Assignee: ' + task.assignee + '</div>' +
                               '</div>';
                    }
                }
            };

            // Render the chart
            var chart = new ApexCharts(document.querySelector("#ganttChart"), options);
            chart.render();
        });
    </script>
}